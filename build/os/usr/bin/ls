if type(printf) ~= "function" then error("Not Prime") return end
local aparse = require("system.util.argparse")
---@type user
local user = require("system.user")
---@type filesystem
local fs = require("system.filesystem")
---@type date
local date = require("system.util.date")
---@type permission
local permission = require("system.permission")
---@type printUtils
local printutils = require("system.util.print")

local listIgnores = {".meta"}

local parser = aparse("ls", "list")
parser:argument("directory", "", fs.cwd())
parser:flag("-a --all", "do not ignore entries starting with .")
parser:flag("-l", "use a long listing format")

local args = {...}
local argfinal = {}
for index, value in ipairs(args) do
    if value ~= "" then
        table.insert(argfinal, tostring(value))
    end
end
args = parser:parse(argfinal)

if not fs.exists(fs.combine("/", args.directory)) then
    printf("ls: No such file or directory")
    return
end

local list = fs.list(fs.combine("/", args.directory))
local dir = {}
local file = {}
local advanced = args.l
if list then
    for index, value in ipairs(list) do
        if fs.isDir(fs.combine(args.directory, value.name)) then
            if value.name:match("^%.") then
                if args.all then
                    table.insert(dir, value)
                end
            else
                table.insert(dir, value)
            end
        else
            table.insert(file, value)
        end
    end
end
local perm_table = permission.getPermissionTable(args.directory)
local print_table = {}
if not advanced then
    print_table = {{}}
    for index, value in ipairs(dir) do
        table.insert(print_table[1], value.name)
    end
    for index, value in ipairs(file) do
        if value.name ~= ".meta" then
            table.insert(print_table[1], value.name)
        end
    end
elseif advanced then
    printf("total "..#list - 1)
    for index, value in ipairs(dir) do
        if perm_table ~= nil then
            if perm_table[value.name] ~= nil then
                local localdata = perm_table[value.name]
                local dates = "Unknown"
                if tonumber(date.date("%Y", localdata.timestamp.mtime or 0)) == tonumber(date.date("%Y")) then
                    dates = tostring(date.date("%b %d %M:%S", localdata.timestamp.mtime or 0) or "Unknown")
                else
                    dates = tostring(date.date("%b %d %Y", localdata.timestamp.mtime or 0) or "Unknown")
                end
                table.insert(print_table, {
                    "d"..permission.parseToString(localdata.permission),
                    user.getData(localdata.owner).name,
                    user.group.getData(localdata.group).name,
                    localdata.size,
                    dates,
                    value.name or "Unknown Folder",
                })
            end
        end
    end
    for index, value in ipairs(file) do
        if perm_table ~= nil then
            if perm_table[value.name] ~= nil then
                local localdata = perm_table[value.name]
                local dates = "Unknown"
                if tonumber(date.date("%Y", localdata.timestamp.mtime or 0)) == tonumber(date.date("%Y")) then
                    dates = tostring(date.date("%b %d %M:%S", localdata.timestamp.mtime or 0) or "Unknown")
                else
                    dates = tostring(date.date("%b %d %Y", localdata.timestamp.mtime or 0) or "Unknown")
                end
                local bad = false
                for i, v in ipairs(listIgnores) do
                    if value.name == v then
                        bad = true
                    end
                end
                if not bad then
                    table.insert(print_table, {
                        "-"..permission.parseToString(localdata.permission),
                        user.getData(localdata.owner).name,
                        user.group.getData(localdata.group).name,
                        localdata.size,
                        dates,
                        value.name or "Unknown Folder",
                    })
                end
            end
        end
    end
end
printutils.printOutput(print_table)