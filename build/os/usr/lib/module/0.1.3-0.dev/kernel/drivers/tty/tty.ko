---@type module_manifest
local manifest = {
    name = "tty",
    version = "0.1.3-0.dev",
    path = "kernel/drivers/tty/tty",
    depends = {}
}

local specials = {
    enter = 28
}

---@class tty_mod
local tty = {}

function tty.create(id)
    ---@class tty
    local tty = {
        id = id,
        buffer = "",
        reading = false
    }

    ---@type eventsystem
    local eventsystem = require("system.event")
    local keys = require("system.internal.keys")
    ---@type tty
    eventsystem.addEventHandler(function(event)
        local _tty = terminal()
        if event[1] == "key" then
            printf("tty" .. tty.id .." Key Pressed: " .. keys.getName(event[2]) .. " Raw: " .. event[2])
            if event[2] == specials.enter then
                _tty.reading = false
            end
        elseif event[1] == "char" then
            printf("tty" .. tty.id .." Key Pressed (Char) " .. event[2])
            _tty:write(event[2])
        end
    end)

    function tty:write(data)
        self.buffer = self.buffer .. tostring(data)
    end

    function tty:read()
        self.reading = true
        while self.reading do
            coroutine.yield()
        end
        local buffer_copy = self.buffer
        self.buffer = ""
        return buffer_copy
    end

    function tty:flush()
        printf(self.buffer)
    end

    return tty
end

---@class std
local std = {}

---@class iostream
---@field fd integer
---@field read function
---@field write function
---@field flush function

---@class stdin:iostream
local stdin = {fd = 0}

function stdin.new() 
    local obj = table.deepcopy(stdin)
    return obj
end

function stdin:read()
    return terminal():read()
end

function stdin:write(data)
    error("Cannot write to read-only stream")
end

function stdin:flush()
    terminal():flush()
end

---@class stdout:iostream
local stdout = {buffer = "", fd = 1}

function stdout.new() 
    local obj = table.deepcopy(stdout)
    return obj
end

function stdout:read()
    error("Cannot read in write-only stream")
end

function stdout:write(data)
    self.buffer = self.buffer .. tostring(data)
end

function stdout:flush()
    printf(self.buffer)
end

---@class stderr:iostream
local stderr = {internal = {}, fd = 2}

function stderr.new() 
    local obj = table.deepcopy(stderr)
    return obj
end

function stderr:read()
    
end

function stderr:write(data)
    
end

function stderr:flush()
    
end

function init()
    printf("TTY Init called")
end

tty.stdin = stdin
tty.stdout = stdout
tty.stderr = stderr

return tty, init, manifest
