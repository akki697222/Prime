---@type module_manifest
local manifest = {
    name = "tty",
    version = "0.1.3-0.dev",
    path = "kernel/drivers/tty/tty",
    depends = {}
}

local specials = {
    enter = 28,
    backspace = 14,
}

---@class tty_mod
local _tty = {}

function _tty.create(id)
    --printf("tty"..id)

    ---@class tty
    local tty = {
        id = id,
        buffer = "",
        reading = false,
        flags = {
            canonical = true
        }
    }

    ---@type eventsystem
    local eventsystem = require("system.event")
    ---@type tty
    eventsystem.addEventHandler(function(event)
        if event[1] == "key" then
            --printf("tty" .. tty.id .. " Key Pressed: " .. keys.getName(event[2]) .. " Raw: " .. event[2])
            if tty.reading and event[2] == specials.enter and tty.flags.canonical then
                terminal():write("\n")
                terminal():setBlink(false)
                tty.reading = false
            elseif tty.reading and event[2] == specials.backspace and tty.flags.canonical then
                terminal():removeBack()
                tty.buffer = tty.buffer:sub(1, -2)
            end
            if not tty.flags.canonical then
                tty:rawInput(event[2])
                tty.reading = false
            end
        elseif event[1] == "char" then
            --printf("tty" .. tty.id .. " Key Pressed (Char) " .. event[2])
            if tty.flags.canonical then
                terminal():write(event[2])
                tty:write(event[2])
            end
        end
    end)

    function tty:write(data)
        self.buffer = self.buffer .. tostring(data)
    end

    function tty:rawInput(key)
        self.buffer = key
    end

    function tty:read()
        terminal():setBlink(true)
        self.reading = true
        while self.reading do
            coroutine.yield()
        end
        local buffer_copy = self.buffer
        self.buffer = ""
        return buffer_copy
    end

    function tty:flush()
        printf(self.buffer)
    end

    function tty:setCanonical(state)
        self.flags.canonical = state
    end

    return tty
end

---@class std
local std = {}

---@class iostream
---@field fd integer
---@field read function
---@field write function
---@field flush function

---@class stdin:iostream
local stdin = { fd = 0 }

function stdin.new()
    local obj = table.deepcopy(stdin)
    return obj
end

function stdin:read()
    return terminal():getTTY():read()
end

function stdin:write(data)
    error("Cannot write to read-only stream")
end

function stdin:flush()
    terminal():getTTY():flush()
end

---@class stdout:iostream
local stdout = { fd = 1 }

function stdout.new()
    local obj = table.deepcopy(stdout)
    return obj
end

function stdout:read()
    error("Cannot read in write-only stream")
end

function stdout:write(data)
    terminal():write(data)
end

function stdout:flush()

end

---@class stderr:iostream
local stderr = { fd = 2 }

function stderr.new()
    local obj = table.deepcopy(stderr)
    return obj
end

function stderr:read()
    error("Cannot read in write-only stream")
end

function stderr:write(data)
    terminal():write(data)
end

function stderr:flush()

end

function init()
    --printf("TTY Init called")
end

_tty.stdin = stdin
_tty.stdout = stdout
_tty.stderr = stderr

return _tty, init, manifest
